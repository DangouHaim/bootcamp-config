---
bootstrap:
<<<<<<< HEAD
  # This is a template bootstrap CLI file that will need to be completed. For a more complete example look at 
  # https://github.com/cognitedata/inso-bootstrap-cli/blob/main/configs/config-deploy-example-v2.yml
=======
  # 220426 pa:
  #  - extended comments explaining options
  # 220422 pa:
  #   - new v2-syntax making *all* bootstrap configuration parameters
  #     available through explicit named properties.
  #
  # Motivation for the breaking change:
  # Compared to v1, which used an extremly sparse syntax, using values as yaml key and values.
  # The v2 change is required to support loading and validating the configuration through
  # Python 'dataclasses', which is a best practice and used by most Cognite yaml-based
  # configurations.

  # bootstrap supports three sections
  # 1. 'features'
  #   - making cli parameters and customizable naming-elements available
  # 2. 'idp-cdf-mappings'
  #   - providing multi CDF Project support of IdP- to CDF-Group mappings
  # 3. 'namespaces'
  #   - a hierarchy of 'namespaces' => 'ns-nodes'
>>>>>>> 48de7cb (Removed parts that needs to be filled in by participants)


    features:
    # v2 adding as features, available as cli paramaters only atm (v1)
    # allowed values are parsed case-insensitive: [true|yes|YES|..] or [false|no|NO|..]
    # not as strings in quotes "yes" or 'yes'

    # default and recommended is: false
    #   in CDF 2022 support for this special-groups is not necessary anymore
    #   check 'bootstrap-cli deploy --help' for more info
        with-special-groups: false

    # default and recommended is: true
        with-raw-capability: true

    # new in v2 to configure prior (v1) hard-coded naming elements
    # Most of the naming-configurations don't have a functional effect, but affect
    # naming of Groups, Datasets and RAWDBs only.
    # All given feature values are reflecting the default values,
    # to support a smooth v1 migration.
    #
    # Recommended values for a new v2-project are given as comments!


    # default is: allprojects
    #   recommended is shorter: 'all'
        aggregated-level-name: all

    # default and recommended is: cdf
    #   supports empty-string ''
        group-prefix: cdf

    # default is: dataset
    #  recommended is shorter 'ds' or minimal ''
    #   supports empty-string ''
        dataset-suffix: ds

    # default is: rawdb
    #  recommended is shorter 'db' or minimal ''
        rawdb-suffix: db

    # default is" ['state']
    #   meant for separating the statestores from extractors from ingested data
    #   recommended: keep it or []
    #   more rawdbs can be configured at a later stage
    #   supports empty list [] for no additional variants
        rawdb-additional-variants:
      # provide more than one rawdb per ns-nodes
      # atm (v1) hardcoded is one additional rawdb
            - state

    # Mapping between IDP (Azure Active Directory) groups and CDF groups.
    idp-cdf-mappings:
<<<<<<< HEAD
    # Support multiple CDF Projects, like dev/test/prod in one config. 
=======
    # Prior (v1) named 'aad_mappings'.
    # Values for 'cdf-group' requires knowledge of resulting CDF Group names
    #
    # Now supporting multiple CDF Projects, like dev/test/prod
    # in one config. Optimization, to reduce redundant maintenance.
    # BOOTSTRAP_CDF_PROJECT env-variable is available and is used to select.
>>>>>>> 48de7cb (Removed parts that needs to be filled in by participants)
        - cdf-project: [CDF project name - test]
          mappings:
              - cdf-group: cdf:all:owner
                idp-source-id: [Azure AD group id]
                idp-source-name: [Azure AD group name]
              - cdf-group: cdf:all:read
                idp-source-id: [Azure AD group id]
                idp-source-name: [Azure AD group name]
              # Template for additional cdf-group mappings
              - cdf-group: [CDF access managment group name]
                idp-source-id: [Azure AD group id]
                idp-source-name: [Azure AD group name]
        - cdf-project: [CDF project name - prod]
          mappings:
              - cdf-group: cdf:all:owner
                idp-source-id: [Azure AD group id]
                idp-source-name: [Azure AD group name]
              - cdf-group: cdf:all:read
                idp-source-id: [Azure AD group id]
                idp-source-name: [Azure AD group name]
              # Template for additional cdf-group mappings
              - cdf-group: [CDF access managment group name]
                idp-source-id: [Azure AD group id]
                idp-source-name: [Azure AD group name]


    namespaces:
<<<<<<< HEAD
        # Typical config will have separate namespace by data source ("src") and use cases ("uc")
=======
    # This is a typical config file that is separated by data source and use cases
>>>>>>> 48de7cb (Removed parts that needs to be filled in by participants)
        - ns-name: [Namespace name]
          description: [Description]

          # Node names will normally follow src:001:srcname or uc:001:usecasename naming convention
          ns-nodes:
              - node-name: [Node name]
                description: [Node description]


# de-facto standards for CDF CogniteClient and logger configuration.
# Following the same parameter structure as the 'Cognite Python Extractor-Utilities'
# and 'Cognite DB Extractor' configuration.
cognite: # kwargs to pass to the CogniteClient, Environment variable format: ${ENVIRONMENT_VARIABLE_NAME}
#   # host: https://${BOOTSTRAP_CDF_CLUSTER}.cognitedata.com/
    host: ${BOOTSTRAP_CDF_HOST}
    project: ${BOOTSTRAP_CDF_PROJECT}
#   #
#   # AAD IdP login credentials:
#   #
    idp-authentication:
        client-id: ${BOOTSTRAP_IDP_CLIENT_ID}
        secret: ${BOOTSTRAP_IDP_CLIENT_SECRET}
        scopes:
            - ${BOOTSTRAP_IDP_SCOPES}
        token_url: ${BOOTSTRAP_IDP_TOKEN_URL}

logger:
    file:
        path: ./logs/bootstrap-cli-logs.log
        level: INFO
    console:
        level: INFO
